#%% LIB
import streamlit as st
# from dotenv import load_dotenv
# import os
from openai import OpenAI

#%% SYSTEM SET-UP
# load_dotenv()
# api_key = os.getenv("SECRETE_KEY")
api_key = st.secrets["SECRETE_KEY"]


client = OpenAI(api_key = api_key)

if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = "gpt-4.1-nano"
    
system_message = """
>>>B·ªêI C·∫¢NH
B·∫°n l√† tr·ª£ l√≠ c·ªßa gi√°o vi√™n. B·∫°n h·ªó tr·ª£ gi√°o vi√™n t·∫°o ra c√°c prompt c√≥ c·∫•u tr√∫c ƒë·ªÉ copy v√† paste v√†o ChatGPT. Gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n n·∫øu ng∆∞·ªùi d√πng h·ªèi.

>>>M·ª§C TI√äU
D·ª±a v√†o nh·ªØng th√¥ng tin gi√°o vi√™n ƒë∆∞a, b·∫°n h√£y chuy·ªÉn th√†nh m·ªôt prompt c√≥ c·∫•u tr√∫c nh∆∞ ƒë∆∞·ª£c m√¥ t·∫£ trong >>>M·∫™U PROMPT. 
N·∫øu ng∆∞·ªùi d√πng ch∆∞a y√™u c·∫ßu t·∫°o prompt th√¨ h√£y h·ªèi ng∆∞·ªùi d√πng th√™m th√¥ng tin, nh∆∞ m√¥n h·ªçc, l·ªõp h·ªçc m√† ng∆∞·ªùi d√πng d·∫°y. 
N·∫øu ng∆∞·ªùi d√πng c·∫ßn t∆∞ v·∫•n v·ªÅ m·ªôt prompt t·ªët, tham kh·∫£o >>>M·∫™U PROMPT ƒë·ªÉ tr·∫£ l·ªùi. 

>>>M·∫™U PROMPT
\#B·ªêI C·∫¢NH
B·∫°n l√† gi√°o vi√™n m√¥n ... l·ªõp ... B·∫°n s·ª≠ d·ª•ng b·ªô s√°ch/t√†i li·ªáu ... B·∫°n d·∫°y h·ªçc theo ch∆∞∆°ng tr√¨nh gi√°o d·ª•c ph·ªï th√¥ng 2018, ·ªü c·∫•p ...
\#NHI·ªÜM V·ª§
B·∫°n s·∫Ω c·∫ßn l√†m ... S·ª≠ d·ª•ng th√¥ng tin trong m·ª•c \#D·ªÆ LI·ªÜU, v√† tr·∫£ ra theo m·∫´u \#K·∫æT QU·∫¢
\#D·ªÆ LI·ªÜU
Ch·ª©a c√°c th√¥ng tin ng∆∞·ªùi d√πng nh·∫≠p ƒë·ªÉ l√†m th√¥ng tin cho prompt.
\#K·∫æT QU·∫¢
Th·ªÉ hi·ªán c·∫•u tr√∫c c√¢u tr·∫£ l·ªùi.

"""

#%% CHATBOT

st.markdown("""
            # ü§ñ PROMPT CHATBOT
            
            Chatbot h·ªó tr·ª£ th·∫ßy c√¥ trong qu√° tr√¨nh t·∫°o prompt.
            """)

if "messages" not in st.session_state:
    st.session_state.messages = []

# Display the conversation history
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        
if prompt := st.chat_input("..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    
    with st.chat_message("user"):
        st.markdown(prompt)
    
    with st.chat_message("assistant"):
        stream = client.chat.completions.create(
            model=st.session_state['openai_model'],
            messages=[{"role": "system", "content": system_message}] + [
                {"role": m["role"], "content": m["content"]}
                for m in st.session_state.messages
                ],
            stream=True,
            temperature=0,
            max_tokens=1000
            )
        
        response = st.write_stream(stream)
        
    st.session_state.messages.append({"role": "assistant", "content": response})
        
        
    